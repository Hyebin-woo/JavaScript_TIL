// 선언, 할당, 범위에 차이가 있다.
// var는 재선언과 재할당이 가능
//let은 재할당만 가능
// const는 재선언과 재할당이 모두 불가능하기때문에 const는 다른 키워드와 다르게 선언과 초기화를 반드시 동시에 진행해야합니다.

let 이름 = "Kim";
이름 = "Park"; //가능

const 나이 = 30;
나이 = 40; //에러

let 이름1 = "Kim";
이름1 = "Park"; //가능

const 나이2 = 30;
나이 = 40; //에러

// const 변수에 오브젝트를 담으면 오브젝트 내의 데이터는 변경 가능합니다.
const 오브젝트 = { 이름: "Kim" };
오브젝트.이름 = "Park"; //가능

// 스코프의 차이가 있습니다.
//let과 const의 스코프는 블록레벨스코프를 갖지만 (거의 모든 {중괄호} (ex)for, if, function)
//var는 함수의 코드 블록만을 지역 스코프를 인정하기 때문에 함수가 아닌 곳에서 var키워드를 사용해서 변수 선언을 한다면 전역변수로 취급이 되어 예상치 못한 결과를 불러올 위험이 있습니다.
// 그래서 ES6 부터, 이를 보완하기 위해 블록 범위의 let 과 const 가 등장한 것 입니다.
//또한 변수의 스코프틑 최대한 좁게 만드는 것을 권장합니다. 그렇기 때문에 var 키워드보다는 let과 const를 사용하는것을 지향합니다.

function 함수() {
    var 이름 = "Kim";
    console.log(이름); //가능
}

console.log(이름); //에러
